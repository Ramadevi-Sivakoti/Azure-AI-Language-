Azure AI Speech provides APIs that you can use to build speech-enabled applications. This includes:

1. Speech to text: An API that enables speech recognition in which your application can accept spoken input.
2. Text to speech: An API that enables speech synthesis in which your application can provide spoken output.
3. Speech Translation: An API that you can use to translate spoken input into multiple languages.
4. Speaker Recognition: An API that enables your application to recognize individual speakers based on their voice.
5. Intent Recognition: An API that uses conversational language understanding to determine the semantic meaning of spoken input.


After you create your resource, you'll need the following information to use it from a client application 
through one of the supported SDKs:

    ~ The location in which the resource is deployed (for example, eastus)
    ~ One of the keys assigned to your resource.


You can view of these values on the Keys and Endpoint page for your resource in the Azure portal.

The Azure AI Speech service supports speech recognition through two REST APIs:

~ The Speech to text API, which is the primary way to perform speech recognition.
~ The Speech to text Short Audio API, which is optimized for short streams of audio (up to 60 seconds).

You can use either API for interactive speech recognition, depending on the expected length of the spoken input. 
You can also use the Speech to text API for batch transcription, transcribing multiple audio files to text as a batch operation.



Reference link: https://learn.microsoft.com/en-us/azure/ai-services/speech-service/rest-speech-to-text


Using the Azure AI Speech SDK: 

While the specific details vary, depending on the SDK being used (Python, C#, and so on); 
there's a consistent pattern for using the Speech to text API:


1. Use a SpeechConfig object to encapsulate the information required to connect to your Azure AI Speech resource. 
Specifically, its location and key.

2. Optionally, use an AudioConfig to define the input source for the audio to be transcribed. 
By default, this is the default system microphone, but you can also specify an audio file.

3. Use the SpeechConfig and AudioConfig to create a SpeechRecognizer object. This object is a proxy client for the Speech to text API.

4. Use the methods of the SpeechRecognizer object to call the underlying API functions. 
For example, the RecognizeOnceAsync() method uses the Azure AI Speech service to asynchronously transcribe a single spoken utterance.

5. Process the response from the Azure AI Speech service. In the case of the RecognizeOnceAsync() method, 
the result is a SpeechRecognitionResult object that includes the following properties:

        ~ Duration
        ~ OffsetInTicks
        ~ Properties
        ~ Reason
        ~ ResultId
        ~ Text

If the operation was successful, the Reason property has the enumerated value RecognizedSpeech, 
and the Text property contains the transcription. 
Other possible values for Result include NoMatch (indicating that the audio was successfully parsed 
but no speech was recognized) or Canceled, indicating that an error occurred 
(in which case, you can check the Properties collection for the CancellationReason property to determine what went wrong).